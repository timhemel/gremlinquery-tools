#include gremtest.grm

test("astNodes_on_leaf", {
	identifiers =
	g.V().has('type','Function').has('code','test_astnodes')
	.functionToAST()
	.astNodes()
	.has('type','Identifier')
	.collect()
	subnodes = __.inject(identifiers[0])
		.astNodes()
		.collect()

	assertEquals(subnodes,[identifiers[0]])
})

test("astNodes_on_root", {
	traversed_nodes =
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.collect() as Set

	functionId = traversed_nodes[0].value('functionId')

	all_function_ast_nodes =
		g.V().has('functionId',functionId)
		.has('type',P.not(P.within('CFGEntryNode','CFGExitNode','Symbol')))
		.collect() as Set

	assertEquals(traversed_nodes,all_function_ast_nodes)
})

test("siblings_single_node", {
	parent = 
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.has('type','AssignmentExpression')
		.next()
	children = __.inject(parent).out(AST_EDGE).collect()

	siblings_expected = (children - children[0]) as Set
	siblings_found =
		__.inject(children[0])
		.siblings()
		.collect() as Set

	assertEquals(siblings_found, siblings_expected)
})

test("siblings_of_siblings", {
	parent = 
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.has('type','AssignmentExpression')
		.next()
	children = __.inject(parent).out(AST_EDGE).collect()
	siblings_expected =
		(children - children[0]) + (children - children[1]) as Set
	siblings_found =
		__.inject(children[0],children[1])
		.siblings()
		.collect() as Set
	assertEquals(siblings_found, siblings_expected)
})

test("statements_from_leaf_ast_node", {
	leafnode =
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.has('type','Identifier')
		.collect()[-1]
	functionId = leafnode.value('functionId')
	cfgnode_expected = 
		g.V()
		.has('functionId',functionId)
		.has('isCFGNode','True')
		.has('type',P.not(P.within('CFGEntryNode','CFGExitNode')))
		.next()
	cfgnode_found =
		__.inject(leafnode)
		.statements()
		.next()

	assertEquals(cfgnode_found, cfgnode_expected)
})

test("statements_from_cfg_node", {
	cfgnode =
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.has('type','ExpressionStatement')
		.collect()[-1]
	cfgnode_found =
		__.inject(cfgnode)
		.statements()
		.next()

	assertEquals(cfgnode_found, cfgnode)
})

test("lval", {
	lvalnode =
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.has('type','AssignmentExpression')
		.lval()
		.values('code')
		.next()
	assertEquals(lvalnode, "x")
})

test("rval", {
	rvalnode =
		g.V().has('type','Function').has('code','test_astnodes')
		.functionToAST()
		.astNodes()
		.has('type','AssignmentExpression')
		.rval()
		.values('code')
		.next()
	assertEquals(rvalnode, "8 * ++ a - b")
})


run_tests()

